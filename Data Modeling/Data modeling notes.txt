What is Requirements in Data modeling?
it refer to the detailed understanding and documentation of what data an organization need to store, process and retrieve.

store, process and retrieve build your foundation.

Real life case: 
cooking: 
	- understand the recipe
	- no of serving
	- dietary restrictions.
	- tools

stockholders > domain experts
- what data do they need to store?
- what data should be process or analyzed? 
- What question should the data answer?
- what the rules that the data must follow?
- are there any constraints like privacy or access limitations?

once you get answers create the blueprint(data model). which help you to organize the data and access it easily.

Why Gather requirements in Data modeling?
- to build a data model that accurately represents bussing needs.
- to avoid wasted effort and resources.
- DB decision making effectively. 

Benefits of proper Gather requirements?
- cost effectiveness
- Accuracy
- Efficiency
- better data quality
- Clarity.

When to use the Gather requirements in Data Modeling?
- at the start of any Data modeling project.
- building new DB or system.
- improve existing DB system.
- migrating data between systems.
- system upgrade due to new requiems. 

Real Live Case:
retail company create db to track sales
- interview sales manager
- inventory team
- finance staff. 
	cust detail, product info, sales transection, discount and promotion rules.

report sales, inventory manage, revenue analysis without any complexity.


when not to use or limitations
- very small or simple data task 
- data change rapidly (agile iterative approach might be best)
- stakeholders have lack of domain knowledge.
- without clear objective cost heigh.


Disadvantage/ challenges Gather requirements
- Time consuming
- Miscommunication of risks
- Incomplete requirement
- Changing requirements.
- Dependency on stakeholders 

----------------------------------------
Class 2
Methodologies
Parts of methodologies
- conceptual, logical, physical data modeling
- hierarchical data modeling
- network data modeling
- Relational data modeling
- Object oriented data modeling
- Entity-Relationship (ER) Model
- Dimensional data modeling
- Graph data modeling

- Conceptual, Logical, Physical data modeling
these represent level based approach to Data modeling. serves as the foundation for all methodologies.

Conceptual Model: it shows you the big picture which describes the overall structure main entities of data without technical details. used in discussion b/w stakeholders and data architects to under the requirements.

	Logical model: Adds details such as
		attributes
		relationships 
		rules
	without tying the design to particular DB structure.
	used to clarify structure and relationships.

	Physical model: it is a format for implementing on a specific DB system, taking into account, like indexes and performance optimization.

- Hierarchical Data Modeling: Data arranges in a tree like structure: every parent node can have multiple child nodes, but every child can only have one parent.

	Benefits:
		- Simple to understand
		- fast for hierarchical, repetitive data

	real life case:
		company structure: CEO -> department head -> team lead -> Employee 

	when/why to use:
		- best for fixed, hierarchical  data - employee management.

	Disadvantages/ when not to use:
		- complex relationship (when multiple parents are needed)
		- data change frequently. or difficult to reorganize or accommodate changes.


- Network Data Modeling: it allows children to have multiple parents.
Data organized like a graph or nodes and links.

	Benefits: 
		- flexible for complex relationship.
		- efficient for Many-to-many

	when/why to use:
		- when relationship is complex.(eg. transportation network, project management dependencies)

	Disadvantages/ when not to use:
		- very difficult to design and manage


- Relational data modeling: it is tales(relations) where each table row is a record and each column is an attribute. 
Relationship b/w tables are managed using keys.

	When/why to use:
		when data needs to be normalized and diff data types are closely related(banking, retail, HR).


	real life case:
		banking application: Accounts, customers, Transactions - 
all connected by keys.

	Disadvantages / when not to use:
		- May be overkill for very small or unstructured data.
		- joins can be slow with huge dataset, scaling can be complex.


- Object-Oriented Data Model: it contains attributes(data) and behaviors(methods). same as oops programming.

	Benefits: 
		- Works well with complex data and relationship.
		- supports inheritance and encapsulation.

	when/why to use:
		application working closely with object-oriented programming like CAD system or multimedia db.

	real life case:
		multimedia system management (images, videos, audio)

	Disadvantages/when not to use: 
		- not supported with traditional relational DB.
		- can be complex.
		- Costly

----------------------------------------
Class 3
What is Entity-Relational (ER) data model: Visuslization data as "entity" (things) are "relationship" (how those thing interact.)

	how does it work?
		- diagrams with shapes
			- rectanges (entities)
			- ovals (attribute)
			- diamonds (relationships)
	
	Benefits:
		- creates a shared language for business and IT.
		- Simplifies complex systems visually.
	
	when to use:
		- during DB design, especially before setting us relational schema.
		- teaching and communication for complex data system.
	
	real life case:
		- university: 
			entities: student, class, professor
			relationship: "enrolled in", "teachers"
		
	Disadvantages / when not to use
		- can become messy with large, higly connected system.
		- Needs conversion before implementation.
		
	
- Dimensional Data Model: organize data around "fact" (achtions or number measured -like sales, profit) and dimensinas (context - like time, location, product...)
	
	how does it work?
		Star or snowflake schemas provide easy, fast acess to maetrics for analytics and reporting.
	
	Benifits:
		- highly performant for reporting
		- simple queries for end users - "how may blue shirts sold in july?"
	
	When to use:
		- data warehouse
		- bi reporting
		- historical trend tracking
		
	Why to use:
		- self-service analysis.
		- speed for summary data.
	
	real life case:
		sales dashboard: facts(Sales amount) and dimensions(store, time, product line)
	

- Graph Data model: represent data as graph of nodes (entities) and edges (relationship)
	

----------

Data modeling life cycle
- Requirements analysis : as same as above
	real life case:
		you interview the sales tieam and gind that they need to track
			- sales by product
			- customers
			- timings
			- stores
			- regions
			- profit margin
			- turnover
			
- Conceptual data model: it contains only entities
	real life case:
		mapping our hospial main enitity
			- Patients
			- Doctors
			- Appointments
			- treatments
				(and how they connect.)
	
- Logical data modeling: plateform indepent blueprint. 
	real life case:
		university system:
			- student(studnetID, name, email)
			- course(CourseID, Name, Credits)
			- Enrollment(EnrollmentID, StudnetID, CourseID, Team)
		
- Physical data modeling: selection of datatype, set up constaints, indexes, secuurity, sometimes we have to deside the hardware.
	real life case:
		encrypting the sensitive data
		
- Tesing, validating & refinemnet: test for accuracy, preformance, refine as needed.

- Deployment: moving the tested model to production environment.

- Mainenance & optimization: bug fix, review, secuurity, fine-tune, onging updates. (it is always an ongoing process).

----------------------------------------
Class 4
ER-Diagram: Entity-Relationship diagram(ERD):  Visual representation of major entities (object) in db.
- structure logic
- relationship

ERDs standardized symboles:
- rectanges: entities
- ovals: attributes
- diamonds: relationship

example:- School db
	- entites: Main objects- Student, Class, Teacher
	- Attribute: Details about each entity: Studnet name, age; class name, time; teacher name, subject.
	- relationship: How entites connect- studnet enroll in class, teachs teach the class.
	

entity:
	- strong
	- weak

attribute
	- key
	- composit
	- multivalued
	- derived

Relationship
	- one to one
	- one to many
	- many to one
	- many to many

benifits: 
	- clarity
	- communication
	- planning
	- conversion
	- Error checking

real life case:
	er diagram for patient, doctor, test.
	- patient: id, name, insurance, admission date.
	- doctor: id, name, specialization.
	- test: test id, result, data.

	relationship
		- a doctor can treat may patients(one to many)
		- patient may undergo many test; a test canblong to several patients (many to many)
		
Disadvantages/when not:
	- Loss of details
	- Mondification difficult
	- scalability  issues
	- No standards
	
ER-diagram of university system
	- students: Stud_id (pk), name, DOB
	- course: course_id (pk), course_name, credits.
	- proferssor: pro_id(pk), name, title

relationship
	- studnet enrols in course(many to many)
	- course taught by proferssor

studnets --< enrols >-- couses --< taught_by >-- proferssor

Types of attribute













